{"version":3,"file":"accessor.js","sourceRoot":"","sources":["accessor.ts"],"names":[],"mappings":";;;;;;;;;AAIA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAItC,MAAM,mBAAmB,GAAQ;IAC7B,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED;IAAA;QACY,WAAM,GAAe,EAAE,CAAC;QAQhB,cAAS,GAAW,SAAS,CAAC;QAM9B,eAAU,GAAW,OAAO,CAAC;IAkCjD,CAAC;IAhCG,sBAAW,mCAAK;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aAED,UAAiB,KAAiB;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;;;OALA;IAAA,CAAC;IAOF,oCAAS,GAAT,UAAU,KAAK;QACX,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,qCAAU,GAAV,UAAW,KAAY;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;IAC9B,CAAC;IAED,2CAAgB,GAAhB,UAAiB,EAAO;QACpB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED,4CAAiB,GAAjB,UAAkB,EAAO;QACrB,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IACjC,CAAC;IAEM,uCAAY,GAAnB,UAAoB,IAAc;QAC9B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;IACzD,CAAC;IAES,0CAAe,GAAzB,UAA0B,KAAa;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,QAAQ,KAAK,KAAK,EAAlB,CAAkB,CAAC,CAAC;IACrE,CAAC;IACL,uBAAC;AAAD,CAAC,AAjDD,IAiDC;;AAxCY;IAAR,KAAK,EAAE;;mDAAsC;AAMrC;IAAR,KAAK,EAAE;;oDAAqC","sourcesContent":["import {\n  ControlValueAccessor\n} from '@angular/forms';\n\nimport { Input } from '@angular/core';\n\nexport type TagModel = string | {[key: string]: any};\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: (items: TagModel[]) => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    /**\n     * @name displayBy\n     * @type {string}\n     */\n    @Input() public displayBy: string = 'display';\n\n    /**\n     * @name identifyBy\n     * @type {string}\n     */\n    @Input() public identifyBy: string = 'value';\n\n    public get items(): TagModel[] {\n        return this._items;\n    };\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    onTouched(items) {\n        this._onTouchedCallback(items);\n    }\n\n    writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    public getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}