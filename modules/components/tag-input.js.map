{"version":3,"file":"tag-input.js","sourceRoot":"","sources":["tag-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    forwardRef,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state\n} from '@angular/core';\n\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as constants from './helpers/constants';\nimport listen from './helpers/listen';\n\nimport { TagInputAccessor, TagModel } from './helpers/accessor';\nimport { TagInputForm } from './tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from './dropdown/tag-input-dropdown.component';\nimport { TagComponent } from './tag/tag.component';\n\nimport 'rxjs/add/operator/debounceTime';\n\n/**\n * A component for entering a list of terms to be used with ngModel.\n */\n@Component({\n    selector: 'tag-input',\n    providers: [ {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => TagInputComponent),\n        multi: true\n    } ],\n    styleUrls: [ './tag-input.style.scss' ],\n    templateUrl: './tag-input.template.html',\n    animations: [\n        trigger('flyInOut', [\n            state('in', style({transform: 'translateX(0)'})),\n            transition(':enter', [\n                animate(250, keyframes([\n                    style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                    style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                    style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                    style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                    style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n                ]))\n            ]),\n            transition(':leave', [\n                animate(150, keyframes([\n                    style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                    style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                    style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     * @type {Array}\n     */\n    @Input() public separatorKeys: number[] = [];\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     * @type {string}\n     */\n    @Input() public placeholder: string = constants.PLACEHOLDER;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     * @type {string}\n     */\n    @Input() public secondaryPlaceholder: string = constants.SECONDARY_PLACEHOLDER;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     * @type {number}\n     */\n    @Input() public maxItems: number = undefined;\n\n    /**\n     * @name readonly\n     * @desc if set to true, the user cannot remove/addItem new items\n     * @type {boolean}\n     */\n    @Input() public readonly: boolean = undefined;\n\n    /**\n     * @name transform\n     * @desc function passed to the component to transform the value of the items, or reject them instead\n     */\n    @Input() public transform: (item: string) => string = (item) => item;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     * @type {Validators[]}\n     */\n    @Input() public validators = [];\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    * @type {Boolean}\n    */\n    @Input() public onlyFromAutocomplete: boolean = false;\n\n\t/**\n     * @name errorMessages\n     * @type {Map<string, string>}\n     */\n    @Input() public errorMessages: {[key: string]: string} = {};\n\n    /**\n     * @name theme\n     * @type {string}\n     */\n    @Input() public theme: string = 'default';\n\n    /**\n     * @name onTextChangeDebounce\n     * @type {number}\n     */\n    @Input() private onTextChangeDebounce: number = 250;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() private inputId: string;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() private inputClass: string;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() private clearOnBlur: string;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() private hideForm: string;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() private addOnBlur: boolean;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() private addOnPaste: boolean;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() private pasteSplitPattern: string = ',';\n\n    /**\n     * @name blinkIfDupe\n     * @type {boolean}\n     */\n    @Input() private blinkIfDupe: boolean = true;\n\n    /**\n     * @name removable\n     * @type {boolean}\n     */\n    @Input() private removable: boolean = true;\n\n    /**\n     * @name editable\n     * @type {boolean}\n     */\n    @Input() private editable: boolean = false;\n\n    /**\n     * @name allowDupes\n     * @type {boolean}\n     */\n    @Input() public allowDupes: boolean = false;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     * @type {boolean}\n     */\n    @Input() public modelAsStrings: boolean = false;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n    @ContentChildren(TemplateRef, {descendants: false}) public templates: QueryList<TemplateRef<any>>;\n\n\t/**\n     * @name inputForm\n     * @type {TagInputForm}\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     * @type {String}\n     */\n    public selectedTag: TagModel;\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     * @type []\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{(fun): any}[]>[],\n        [constants.KEYUP]: <{(fun): any}[]>[],\n        change: <{(fun): any}[]>[]\n    };\n\n    public isLoading: boolean = false;\n\n    constructor(private renderer: Renderer) {\n        super();\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    public removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectedTag = undefined;\n        }\n\n        // focus input right after removing an item\n        this.focus(true);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     */\n    public addItem(isFromAutocomplete = false): void {\n        const inputValue = this.setInputValue(this.inputForm.value.value);\n        const tag = this.createTag(inputValue, inputValue);\n\n        if (!this.inputForm.form.valid || !inputValue) {\n            return;\n        }\n\n        if (this.isTagValid(tag, isFromAutocomplete)) {\n            this.appendNewTag(tag);\n        } else {\n            this.onValidationError.emit(tag);\n        }\n\n        // reset control and focus input\n        this.setInputValue('');\n        this.focus(true);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid(tag: TagModel, isFromAutocomplete = false): boolean {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !isFromAutocomplete) {\n            return;\n        }\n\n        // check if the transformed item is already existing in the list\n        const dupe = this.items.find((item: TagModel) => {\n            const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n            const displayBy = isFromAutocomplete ? this.dropdown.displayBy : this.displayBy;\n\n            return this.getItemValue(item) === tag[identifyBy] ||\n                item[this.identifyBy] === tag[identifyBy] ||\n                item[this.displayBy] === tag[displayBy];\n        });\n\n        const hasDupe = !!dupe && dupe !== undefined;\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && hasDupe && this.blinkIfDupe) {\n            const item = this.tags.find(_tag => {\n                return this.getItemValue(_tag.model) === this.getItemValue(dupe);\n            });\n\n            if (item) {\n                item.blink();\n            }\n        }\n\n        const fromAutocomplete = isFromAutocomplete && this.onlyFromAutocomplete;\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !hasDupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((fromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name appendNewTag\n     * @param tag\n     */\n    public appendNewTag(tag: TagModel): void {\n        const newTag = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        // push item to array of items\n        this.items = [...this.items, newTag];\n\n        // emit event\n        this.onAdd.emit(tag);\n    }\n\n    /**\n     * @name createTag\n     * @param display\n     * @param value\n     * @returns {{}}\n     */\n    public createTag(display: string, value: any): TagModel {\n        return {\n            [this.displayBy]: display,\n            [this.identifyBy]: value\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     */\n    public selectItem(item: TagModel): void {\n        if (this.readonly || !item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        // emit event\n        this.onSelect.emit(item);\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    this.removeItem(this.selectedTag, this.items.indexOf(this.selectedTag));\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.switchPrev(data.model);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.switchNext(data.model);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                this.switchNext(data.model);\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    /**\n     * @name seyInputValue\n     * @param value\n     * @returns {string}\n     */\n    public setInputValue(value: string): string {\n        const item = value ? this.transform(value) : '';\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(item);\n\n        return item;\n    }\n\n    /**\n     * @name getControl\n     * @returns {FormControl}\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n\t/**\n     * @name focus\n     * @param applyFocus\n     */\n    public focus(applyFocus = false): void {\n        if (this.readonly) {\n            return;\n        }\n\n        if (this.dropdown) {\n            this.dropdown.show();\n        }\n\n        this.selectedTag = undefined;\n\n        this.onFocus.emit(this.inputForm.value.value);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n        }\n    }\n\n\t/**\n     * @name blur\n     */\n    public blur(): void {\n        this.onBlur.emit(this.inputForm.value.value);\n    }\n\n    /**\n     * @name hasErrors\n     * @returns {boolean}\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     * @returns {boolean}\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ? this.dropdown.templates.first : undefined;\n        return template && template !== menuTemplate;\n    }\n\n    /**\n     * @name switchNext\n     * @param item { TagModel }\n     */\n    public switchNext(item: TagModel): void {\n        if (this.tags.last.model === item) {\n            this.focus(true);\n            return;\n        }\n\n        const tags = this.tags.toArray();\n        const tagIndex = tags.findIndex(tag => tag.model === item);\n        const tag = tags[tagIndex + 1];\n\n        tag.select.call(tag);\n    }\n\n    /**\n     * @name switchPrev\n     * @param item { TagModel }\n     */\n    public switchPrev(item: TagModel): void {\n        if (this.tags.first.model !== item) {\n            const tags = this.tags.toArray();\n            const tagIndex = tags.findIndex(tag => tag.model === item);\n            const tag = tags[tagIndex - 1];\n\n            tag.select.call(tag);\n        }\n    }\n\n\t/**\n     * @name maxItemsReached\n     * @returns {boolean}\n     */\n    private get maxItemsReached(): boolean {\n        return this.maxItems !== undefined && this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name trackBy\n     * @param item\n     * @returns {string}\n     */\n    private trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback(data: ClipboardEvent) {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item, item))\n            .forEach(item => {\n                const display = this.transform(item[this.displayBy]);\n                const tag = this.createTag(display, display);\n\n                if (this.isTagValid(tag)) {\n                    this.appendNewTag(tag);\n                }\n            });\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit() {\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const itemsLength: number = this.items.length,\n                inputValue: string = this.inputForm.value.value,\n                isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey && !inputValue && itemsLength) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        });\n\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            if (this.separatorKeys.indexOf($event.keyCode) >= 0) {\n                $event.preventDefault();\n                this.addItem();\n            }\n        }, this.separatorKeys.length > 0);\n\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const maxItemsReached = this.maxItems !== undefined && this.items && this.items.length > this.maxItems;\n\n        if (maxItemsReached) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit() {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n        });\n\n        if (this.onTextChange.observers.length) {\n            this.inputForm.form.valueChanges\n                .debounceTime(this.onTextChangeDebounce)\n                .subscribe(() => {\n                    const value = this.inputForm.value.value;\n                    this.onTextChange.emit(value);\n                });\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.inputForm\n                .onBlur\n                .subscribe(() => {\n                    if (this.addOnBlur) {\n                        this.addItem();\n                    }\n\n                    this.setInputValue('');\n                });\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            const input = this.inputForm.input.nativeElement;\n\n            // attach listener to input\n            this.renderer.listen(input, 'paste', this.onPasteCallback.bind(this));\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}