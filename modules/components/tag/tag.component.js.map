{"version":3,"file":"tag.component.js","sourceRoot":"","sources":["tag.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    Renderer,\n    HostListener,\n    ViewChild\n} from '@angular/core';\n\nimport { TagModel } from '../helpers/accessor';\nimport { TagRipple } from './tag-ripple.component';\n\n@Component({\n    selector: 'tag',\n    templateUrl: './tag.template.html',\n    styleUrls: [ './tag-component.style.scss' ]\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input() public model: TagModel;\n\n    /**\n     * @name readonly {boolean}\n     */\n    @Input() public readonly: boolean;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input() public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input() public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input() public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input() private displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input() private identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input() private index: number;\n\n    /**\n     * @name onSelect\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     * @type {EventEmitter<any>}\n     */\n    @Output() public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     * @type {EventEmitter<any>}\n     */\n    @Output() public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name editModeActivated\n     * @type {boolean}\n     */\n    private editModeActivated: boolean = false;\n\n    /**\n     * @name rippleState\n     * @type {string}\n     */\n    private rippleState: string = 'none';\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple) public ripple: TagRipple;\n\n    constructor(public element: ElementRef, public renderer: Renderer) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove(): void {\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.renderer.invokeElementMethod(this.element.nativeElement, 'focus');\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener('keydown', ['$event'])\n    public keydown(event: KeyboardEvent): void {\n        if (this.editModeActivated) {\n            event.keyCode === 13 ? this.disableEditMode(event) : this.storeNewValue();\n            return;\n        }\n\n        this.onKeyDown.emit({event, model: this.model});\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('blink');\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editModeActivated) {\n            this.storeNewValue();\n        } else {\n            this.element.nativeElement.querySelector('[contenteditable]').focus();\n        }\n\n        this.editModeActivated = !this.editModeActivated;\n        this.renderer.setElementClass(this.element.nativeElement, 'tag--editing', this.editModeActivated);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     * @returns {string}\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n\n    /**\n     * @name getContentEditableText\n     * @returns {string}\n     */\n    private getContentEditableText(): string {\n        return this.element.nativeElement.querySelector('[contenteditable]').innerText.trim();\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    private disableEditMode($event: KeyboardEvent): void {\n        this.editModeActivated = false;\n        $event.preventDefault();\n    }\n\n    /**\n     * @name storeNewValue\n     */\n    private storeNewValue(): void {\n        const input = this.getContentEditableText();\n\n        const exists = (model: TagModel) => {\n            return typeof model === 'string' ?\n                model === input :\n                model[this.identifyBy] === input;\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            const itemValue = this.model[this.identifyBy];\n\n            this.model = typeof this.model === 'string' ? input :\n                {[this.identifyBy]: itemValue, [this.displayBy]: itemValue};\n\n            // emit output\n            this.onTagEdited.emit(this.model);\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     * @returns {boolean}\n     */\n    private isDeleteIconVisible(): boolean {\n        return !this.readonly && this.removable && !this.editModeActivated;\n    }\n\n    /**\n     * @name isRippleVisible\n     * @returns {boolean}\n     */\n    private isRippleVisible(): boolean {\n        return !this.readonly && !this.editModeActivated;\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}